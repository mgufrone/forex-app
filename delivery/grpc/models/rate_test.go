// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRates(t *testing.T) {
	t.Parallel()

	query := Rates()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRatesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Rates().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RateSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRatesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RateExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Rate exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RateExists to return true, but got false.")
	}
}

func testRatesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rateFound, err := FindRate(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if rateFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRatesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Rates().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRatesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Rates().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRatesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rateOne := &Rate{}
	rateTwo := &Rate{}
	if err = randomize.Struct(seed, rateOne, rateDBTypes, false, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}
	if err = randomize.Struct(seed, rateTwo, rateDBTypes, false, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRatesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rateOne := &Rate{}
	rateTwo := &Rate{}
	if err = randomize.Struct(seed, rateOne, rateDBTypes, false, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}
	if err = randomize.Struct(seed, rateTwo, rateDBTypes, false, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rateOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rateTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rateBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func rateAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Rate) error {
	*o = Rate{}
	return nil
}

func testRatesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Rate{}
	o := &Rate{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rateDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Rate object: %s", err)
	}

	AddRateHook(boil.BeforeInsertHook, rateBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rateBeforeInsertHooks = []RateHook{}

	AddRateHook(boil.AfterInsertHook, rateAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rateAfterInsertHooks = []RateHook{}

	AddRateHook(boil.AfterSelectHook, rateAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rateAfterSelectHooks = []RateHook{}

	AddRateHook(boil.BeforeUpdateHook, rateBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rateBeforeUpdateHooks = []RateHook{}

	AddRateHook(boil.AfterUpdateHook, rateAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rateAfterUpdateHooks = []RateHook{}

	AddRateHook(boil.BeforeDeleteHook, rateBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rateBeforeDeleteHooks = []RateHook{}

	AddRateHook(boil.AfterDeleteHook, rateAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rateAfterDeleteHooks = []RateHook{}

	AddRateHook(boil.BeforeUpsertHook, rateBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rateBeforeUpsertHooks = []RateHook{}

	AddRateHook(boil.AfterUpsertHook, rateAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rateAfterUpsertHooks = []RateHook{}
}

func testRatesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rateColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRatesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RateSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRatesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rates().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rateDBTypes = map[string]string{`ID`: `VARCHAR(255)`, `Base`: `VARCHAR(3)`, `Symbol`: `VARCHAR(3)`, `Source`: `VARCHAR(20)`, `SourceType`: `VARCHAR(20)`, `Sell`: `DECIMAL(10, 2)`, `Buy`: `DECIMAL(10, 2)`, `UpdatedAt`: `DATETIME`}
	_           = bytes.MinRead
)

func testRatesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ratePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rateAllColumns) == len(ratePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rateDBTypes, true, ratePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRatesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rateAllColumns) == len(ratePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Rate{}
	if err = randomize.Struct(seed, o, rateDBTypes, true, rateColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rates().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rateDBTypes, true, ratePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Rate struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rateAllColumns, ratePrimaryKeyColumns) {
		fields = rateAllColumns
	} else {
		fields = strmangle.SetComplement(
			rateAllColumns,
			ratePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RateSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
