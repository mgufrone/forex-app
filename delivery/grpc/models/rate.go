// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Rate is an object representing the database table.
type Rate struct {
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Base       string    `boil:"base" json:"base" toml:"base" yaml:"base"`
	Symbol     string    `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	Source     string    `boil:"source" json:"source" toml:"source" yaml:"source"`
	SourceType string    `boil:"source_type" json:"source_type" toml:"source_type" yaml:"source_type"`
	Sell       string    `boil:"sell" json:"sell" toml:"sell" yaml:"sell"`
	Buy        string    `boil:"buy" json:"buy" toml:"buy" yaml:"buy"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *rateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RateColumns = struct {
	ID         string
	Base       string
	Symbol     string
	Source     string
	SourceType string
	Sell       string
	Buy        string
	UpdatedAt  string
}{
	ID:         "id",
	Base:       "base",
	Symbol:     "symbol",
	Source:     "source",
	SourceType: "source_type",
	Sell:       "sell",
	Buy:        "buy",
	UpdatedAt:  "updated_at",
}

var RateTableColumns = struct {
	ID         string
	Base       string
	Symbol     string
	Source     string
	SourceType string
	Sell       string
	Buy        string
	UpdatedAt  string
}{
	ID:         "rate.id",
	Base:       "rate.base",
	Symbol:     "rate.symbol",
	Source:     "rate.source",
	SourceType: "rate.source_type",
	Sell:       "rate.sell",
	Buy:        "rate.buy",
	UpdatedAt:  "rate.updated_at",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var RateWhere = struct {
	ID         whereHelperstring
	Base       whereHelperstring
	Symbol     whereHelperstring
	Source     whereHelperstring
	SourceType whereHelperstring
	Sell       whereHelperstring
	Buy        whereHelperstring
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperstring{field: "\"rate\".\"id\""},
	Base:       whereHelperstring{field: "\"rate\".\"base\""},
	Symbol:     whereHelperstring{field: "\"rate\".\"symbol\""},
	Source:     whereHelperstring{field: "\"rate\".\"source\""},
	SourceType: whereHelperstring{field: "\"rate\".\"source_type\""},
	Sell:       whereHelperstring{field: "\"rate\".\"sell\""},
	Buy:        whereHelperstring{field: "\"rate\".\"buy\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"rate\".\"updated_at\""},
}

// RateRels is where relationship names are stored.
var RateRels = struct {
}{}

// rateR is where relationships are stored.
type rateR struct {
}

// NewStruct creates a new relationship struct
func (*rateR) NewStruct() *rateR {
	return &rateR{}
}

// rateL is where Load methods for each relationship are stored.
type rateL struct{}

var (
	rateAllColumns            = []string{"id", "base", "symbol", "source", "source_type", "sell", "buy", "updated_at"}
	rateColumnsWithoutDefault = []string{"id", "base", "symbol", "source", "source_type", "sell", "buy", "updated_at"}
	rateColumnsWithDefault    = []string{}
	ratePrimaryKeyColumns     = []string{"id"}
)

type (
	// RateSlice is an alias for a slice of pointers to Rate.
	// This should almost always be used instead of []Rate.
	RateSlice []*Rate
	// RateHook is the signature for custom Rate hook methods
	RateHook func(context.Context, boil.ContextExecutor, *Rate) error

	rateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rateType                 = reflect.TypeOf(&Rate{})
	rateMapping              = queries.MakeStructMapping(rateType)
	ratePrimaryKeyMapping, _ = queries.BindMapping(rateType, rateMapping, ratePrimaryKeyColumns)
	rateInsertCacheMut       sync.RWMutex
	rateInsertCache          = make(map[string]insertCache)
	rateUpdateCacheMut       sync.RWMutex
	rateUpdateCache          = make(map[string]updateCache)
	rateUpsertCacheMut       sync.RWMutex
	rateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rateBeforeInsertHooks []RateHook
var rateBeforeUpdateHooks []RateHook
var rateBeforeDeleteHooks []RateHook
var rateBeforeUpsertHooks []RateHook

var rateAfterInsertHooks []RateHook
var rateAfterSelectHooks []RateHook
var rateAfterUpdateHooks []RateHook
var rateAfterDeleteHooks []RateHook
var rateAfterUpsertHooks []RateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Rate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Rate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Rate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Rate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Rate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Rate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Rate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Rate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Rate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRateHook registers your hook function for all future operations.
func AddRateHook(hookPoint boil.HookPoint, rateHook RateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rateBeforeInsertHooks = append(rateBeforeInsertHooks, rateHook)
	case boil.BeforeUpdateHook:
		rateBeforeUpdateHooks = append(rateBeforeUpdateHooks, rateHook)
	case boil.BeforeDeleteHook:
		rateBeforeDeleteHooks = append(rateBeforeDeleteHooks, rateHook)
	case boil.BeforeUpsertHook:
		rateBeforeUpsertHooks = append(rateBeforeUpsertHooks, rateHook)
	case boil.AfterInsertHook:
		rateAfterInsertHooks = append(rateAfterInsertHooks, rateHook)
	case boil.AfterSelectHook:
		rateAfterSelectHooks = append(rateAfterSelectHooks, rateHook)
	case boil.AfterUpdateHook:
		rateAfterUpdateHooks = append(rateAfterUpdateHooks, rateHook)
	case boil.AfterDeleteHook:
		rateAfterDeleteHooks = append(rateAfterDeleteHooks, rateHook)
	case boil.AfterUpsertHook:
		rateAfterUpsertHooks = append(rateAfterUpsertHooks, rateHook)
	}
}

// One returns a single rate record from the query.
func (q rateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Rate, error) {
	o := &Rate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for rate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Rate records from the query.
func (q rateQuery) All(ctx context.Context, exec boil.ContextExecutor) (RateSlice, error) {
	var o []*Rate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Rate slice")
	}

	if len(rateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Rate records in the query.
func (q rateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count rate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if rate exists")
	}

	return count > 0, nil
}

// Rates retrieves all the records using an executor.
func Rates(mods ...qm.QueryMod) rateQuery {
	mods = append(mods, qm.From("\"rate\""))
	return rateQuery{NewQuery(mods...)}
}

// FindRate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRate(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Rate, error) {
	rateObj := &Rate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"rate\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from rate")
	}

	if err = rateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rateObj, err
	}

	return rateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Rate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no rate provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rateInsertCacheMut.RLock()
	cache, cached := rateInsertCache[key]
	rateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rateAllColumns,
			rateColumnsWithDefault,
			rateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rateType, rateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rateType, rateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"rate\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"rate\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"rate\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, ratePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into rate")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for rate")
	}

CacheNoHooks:
	if !cached {
		rateInsertCacheMut.Lock()
		rateInsertCache[key] = cache
		rateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Rate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Rate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rateUpdateCacheMut.RLock()
	cache, cached := rateUpdateCache[key]
	rateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rateAllColumns,
			ratePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update rate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"rate\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, ratePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rateType, rateMapping, append(wl, ratePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update rate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for rate")
	}

	if !cached {
		rateUpdateCacheMut.Lock()
		rateUpdateCache[key] = cache
		rateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for rate")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"rate\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rate")
	}
	return rowsAff, nil
}

// Delete deletes a single Rate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Rate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Rate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ratePrimaryKeyMapping)
	sql := "DELETE FROM \"rate\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for rate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rate")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for rate")
	}

	if len(rateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Rate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ratePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"rate\".* FROM \"rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ratePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RateSlice")
	}

	*o = slice

	return nil
}

// RateExists checks if the Rate row exists.
func RateExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"rate\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if rate exists")
	}

	return exists, nil
}
